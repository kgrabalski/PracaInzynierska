//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace generatorRestauracji
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class FoodSearchEntities : DbContext
    {
        public FoodSearchEntities()
            : base("name=FoodSearchEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<Cuisine> Cuisines { get; set; }
        public virtual DbSet<DeliveryAddress> DeliveryAddresses { get; set; }
        public virtual DbSet<DeliveryType> DeliveryTypes { get; set; }
        public virtual DbSet<Dish> Dishes { get; set; }
        public virtual DbSet<DishGroup> DishGroups { get; set; }
        public virtual DbSet<District> Districts { get; set; }
        public virtual DbSet<Hash> Hashes { get; set; }
        public virtual DbSet<Image> Images { get; set; }
        public virtual DbSet<OpeningHour> OpeningHours { get; set; }
        public virtual DbSet<Opinion> Opinions { get; set; }
        public virtual DbSet<OrderDish> OrderDishes { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<OrderState> OrderStates { get; set; }
        public virtual DbSet<OrderStatesHistory> OrderStatesHistories { get; set; }
        public virtual DbSet<PasswordResetRequest> PasswordResetRequests { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<PaymentsHistory> PaymentsHistories { get; set; }
        public virtual DbSet<PaymentState> PaymentStates { get; set; }
        public virtual DbSet<PaymentType> PaymentTypes { get; set; }
        public virtual DbSet<RegistrationConfirmation> RegistrationConfirmations { get; set; }
        public virtual DbSet<Restaurant> Restaurants { get; set; }
        public virtual DbSet<RestaurantCuisine> RestaurantCuisines { get; set; }
        public virtual DbSet<RestaurantUser> RestaurantUsers { get; set; }
        public virtual DbSet<Street> Streets { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserState> UserStates { get; set; }
        public virtual DbSet<UserType> UserTypes { get; set; }
    
        public virtual int ClearImagesTable()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ClearImagesTable");
        }
    
        public virtual ObjectResult<Nullable<int>> CreateOpeningHour(Nullable<System.Guid> restaurantId, Nullable<int> day, Nullable<System.TimeSpan> timeFrom, Nullable<System.TimeSpan> timeTo)
        {
            var restaurantIdParameter = restaurantId.HasValue ?
                new ObjectParameter("restaurantId", restaurantId) :
                new ObjectParameter("restaurantId", typeof(System.Guid));
    
            var dayParameter = day.HasValue ?
                new ObjectParameter("day", day) :
                new ObjectParameter("day", typeof(int));
    
            var timeFromParameter = timeFrom.HasValue ?
                new ObjectParameter("timeFrom", timeFrom) :
                new ObjectParameter("timeFrom", typeof(System.TimeSpan));
    
            var timeToParameter = timeTo.HasValue ?
                new ObjectParameter("timeTo", timeTo) :
                new ObjectParameter("timeTo", typeof(System.TimeSpan));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CreateOpeningHour", restaurantIdParameter, dayParameter, timeFromParameter, timeToParameter);
        }
    
        public virtual ObjectResult<Nullable<System.Guid>> CreateRestaurant(string restaurantName, Nullable<int> addressId, Nullable<int> logoId, string userFirstName, string userLastName, string userEmail, string userPhone, byte[] userPassword)
        {
            var restaurantNameParameter = restaurantName != null ?
                new ObjectParameter("restaurantName", restaurantName) :
                new ObjectParameter("restaurantName", typeof(string));
    
            var addressIdParameter = addressId.HasValue ?
                new ObjectParameter("addressId", addressId) :
                new ObjectParameter("addressId", typeof(int));
    
            var logoIdParameter = logoId.HasValue ?
                new ObjectParameter("logoId", logoId) :
                new ObjectParameter("logoId", typeof(int));
    
            var userFirstNameParameter = userFirstName != null ?
                new ObjectParameter("userFirstName", userFirstName) :
                new ObjectParameter("userFirstName", typeof(string));
    
            var userLastNameParameter = userLastName != null ?
                new ObjectParameter("userLastName", userLastName) :
                new ObjectParameter("userLastName", typeof(string));
    
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("userEmail", userEmail) :
                new ObjectParameter("userEmail", typeof(string));
    
            var userPhoneParameter = userPhone != null ?
                new ObjectParameter("userPhone", userPhone) :
                new ObjectParameter("userPhone", typeof(string));
    
            var userPasswordParameter = userPassword != null ?
                new ObjectParameter("userPassword", userPassword) :
                new ObjectParameter("userPassword", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.Guid>>("CreateRestaurant", restaurantNameParameter, addressIdParameter, logoIdParameter, userFirstNameParameter, userLastNameParameter, userEmailParameter, userPhoneParameter, userPasswordParameter);
        }
    
        public virtual ObjectResult<GetDeliveryRange_Result> GetDeliveryRange(Nullable<System.Guid> restaurantId)
        {
            var restaurantIdParameter = restaurantId.HasValue ?
                new ObjectParameter("restaurantId", restaurantId) :
                new ObjectParameter("restaurantId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDeliveryRange_Result>("GetDeliveryRange", restaurantIdParameter);
        }
    
        public virtual ObjectResult<GetPartnerRestaurants_Result> GetPartnerRestaurants()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPartnerRestaurants_Result>("GetPartnerRestaurants");
        }
    
        public virtual ObjectResult<GetRestaurantDailyFinancialReport_Result> GetRestaurantDailyFinancialReport(Nullable<System.Guid> restaurantId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<bool> isRestaurant)
        {
            var restaurantIdParameter = restaurantId.HasValue ?
                new ObjectParameter("restaurantId", restaurantId) :
                new ObjectParameter("restaurantId", typeof(System.Guid));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var isRestaurantParameter = isRestaurant.HasValue ?
                new ObjectParameter("isRestaurant", isRestaurant) :
                new ObjectParameter("isRestaurant", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRestaurantDailyFinancialReport_Result>("GetRestaurantDailyFinancialReport", restaurantIdParameter, dateFromParameter, dateToParameter, isRestaurantParameter);
        }
    
        public virtual ObjectResult<GetRestaurantMonthlyFinancialReport_Result> GetRestaurantMonthlyFinancialReport(Nullable<System.Guid> restaurantId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<bool> isRestaurant)
        {
            var restaurantIdParameter = restaurantId.HasValue ?
                new ObjectParameter("restaurantId", restaurantId) :
                new ObjectParameter("restaurantId", typeof(System.Guid));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var isRestaurantParameter = isRestaurant.HasValue ?
                new ObjectParameter("isRestaurant", isRestaurant) :
                new ObjectParameter("isRestaurant", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRestaurantMonthlyFinancialReport_Result>("GetRestaurantMonthlyFinancialReport", restaurantIdParameter, dateFromParameter, dateToParameter, isRestaurantParameter);
        }
    
        public virtual ObjectResult<string> GetRestaurantOrders(Nullable<System.Guid> restaurantId, Nullable<System.Guid> orderId, Nullable<int> ordersState)
        {
            var restaurantIdParameter = restaurantId.HasValue ?
                new ObjectParameter("restaurantId", restaurantId) :
                new ObjectParameter("restaurantId", typeof(System.Guid));
    
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("orderId", orderId) :
                new ObjectParameter("orderId", typeof(System.Guid));
    
            var ordersStateParameter = ordersState.HasValue ?
                new ObjectParameter("ordersState", ordersState) :
                new ObjectParameter("ordersState", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetRestaurantOrders", restaurantIdParameter, orderIdParameter, ordersStateParameter);
        }
    
        public virtual ObjectResult<GetRestaurantRating_Result> GetRestaurantRating(Nullable<System.Guid> restaurantId)
        {
            var restaurantIdParameter = restaurantId.HasValue ?
                new ObjectParameter("restaurantId", restaurantId) :
                new ObjectParameter("restaurantId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRestaurantRating_Result>("GetRestaurantRating", restaurantIdParameter);
        }
    
        public virtual ObjectResult<GetRestaurants_Result> GetRestaurants(Nullable<int> addressId, Nullable<System.DateTime> date, string filter)
        {
            var addressIdParameter = addressId.HasValue ?
                new ObjectParameter("addressId", addressId) :
                new ObjectParameter("addressId", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var filterParameter = filter != null ?
                new ObjectParameter("filter", filter) :
                new ObjectParameter("filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRestaurants_Result>("GetRestaurants", addressIdParameter, dateParameter, filterParameter);
        }
    
        public virtual ObjectResult<GetStreets_Result> GetStreets(Nullable<int> cityId, string query)
        {
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("cityId", cityId) :
                new ObjectParameter("cityId", typeof(int));
    
            var queryParameter = query != null ?
                new ObjectParameter("query", query) :
                new ObjectParameter("query", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStreets_Result>("GetStreets", cityIdParameter, queryParameter);
        }
    
        public virtual ObjectResult<GetSystemDailyFinancialReport_Result> GetSystemDailyFinancialReport(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSystemDailyFinancialReport_Result>("GetSystemDailyFinancialReport", dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<GetSystemMonthlyFinancialReport_Result> GetSystemMonthlyFinancialReport(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSystemMonthlyFinancialReport_Result>("GetSystemMonthlyFinancialReport", dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<GetUserOrders_Result> GetUserOrders(Nullable<System.Guid> userId, Nullable<int> page, Nullable<int> pageSize)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(System.Guid));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserOrders_Result>("GetUserOrders", userIdParameter, pageParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> UpdateDeliveryRange(Nullable<System.Guid> restaurantId, Nullable<bool> hasDeliveryRadius, Nullable<decimal> deliveryRadius, string polygonGml)
        {
            var restaurantIdParameter = restaurantId.HasValue ?
                new ObjectParameter("restaurantId", restaurantId) :
                new ObjectParameter("restaurantId", typeof(System.Guid));
    
            var hasDeliveryRadiusParameter = hasDeliveryRadius.HasValue ?
                new ObjectParameter("hasDeliveryRadius", hasDeliveryRadius) :
                new ObjectParameter("hasDeliveryRadius", typeof(bool));
    
            var deliveryRadiusParameter = deliveryRadius.HasValue ?
                new ObjectParameter("deliveryRadius", deliveryRadius) :
                new ObjectParameter("deliveryRadius", typeof(decimal));
    
            var polygonGmlParameter = polygonGml != null ?
                new ObjectParameter("polygonGml", polygonGml) :
                new ObjectParameter("polygonGml", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("UpdateDeliveryRange", restaurantIdParameter, hasDeliveryRadiusParameter, deliveryRadiusParameter, polygonGmlParameter);
        }
    }
}
